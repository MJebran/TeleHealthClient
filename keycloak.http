@keycloak_url=https://auth.snowse.duckdns.org
 
# double check cookies in settings for http requests
# rest client settings > uncheck remember cookies
 
 
###
# create challenge: echo -n "randomsecretstringrandomsecretstringrandomsecretstringrandomsecretstring" | sha256sum -b | xxd -p -r | base64 | tr '/+' '_-' | tr -d '='
# code_challenge: wjyPi7DnThs7N3PS9S9t2bLrtdrhXxU39zx1sBoGx90
# i think code_verifier has length requirements
# @name first
 
GET https://auth.snowse.duckdns.org/realms/advanced-frontend/protocol/openid-connect/auth
    ?client_id=alex-in-class
    &redirect_uri=http://doestntExist/callback
    &response_type=code
    &response_mode=fragment
    &state=doesntmatter
    &code_challenge=
    &code_challenge_method=S256
    &scope=profile openid email
### get url from action of previous form
### & is going to be html escaped
# @name manualLogin
post getUrlfromPreviousRequest
Content-Type: application/x-www-form-urlencoded
Cookie: {{first.response.headers.Set-Cookie}}
 
username=alex
&password=alex
 
### turn the code into a token
# @name getToken
post {{keycloak_url}}/realms/advanced-frontend/protocol/openid-connect/token
Cookie: {{first.response.headers.Set-Cookie}}
Content-Type: application/x-www-form-urlencoded
 
client_id=alex-in-class
&code=get from previous request
&redirect_uri=needs to match the first request
&code_verifier=needs to be the code used to generate the sha256 string
&grant_type=authorization_code
 
###
# https://auth.snowse.duckdns.org/realms/advanced-frontend/.well-known/openid-configuration
# for this to work, you must request the openid scope at the begining of the workflow
# @name useToken
 
get {{keycloak_url}}/realms/advanced-frontend/protocol/openid-connect/userinfo
Authorization: Bearer accessTokenGoesHere